{"version":3,"sources":["./src/environments/environment.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;;;;;;ACfD;AAEV;AACX;AACI;AACY;AACgB;AAC7B;;AAGhD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE;CACjB;AAED,MACM,IAAI;IAGR,YAAoB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;QACpC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAS,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC;IACjD,CAAC;;wDALG,IAAI;mFAAJ,IAAI;;AAQV,CAAC,GAAS,EAAE,CAAC;IACX,MAAM,WAAW,GAAG,0CAAY;IAChC,MAAM,aAAa,GAAG,4CAAc;IACpC,MAAM,eAAe,GAAG,sDAAgB;IACxC,MAAM,sBAAsB,GAAG,8DAAwB;IACvD,MAAM,YAAY,GAAG,2CAAa;IAClC,MAAM,UAAU,GAAG,IAAI;IACvB,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;IAC7D,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9D,2EAAwB,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC7F,CAAC,EAAC,EAAE;;;;;;;;;;;;ACjCJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode, NgModule, Injector } from '@angular/core'\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic'\r\nimport { environment } from './environments/environment'\r\nimport * as angular_core from '@angular/core'\r\nimport * as angular_router from '@angular/router'\r\nimport * as platform_browser from '@angular/platform-browser'\r\nimport * as platform_browser_dynamic from '@angular/platform-browser-dynamic'\r\nimport * as angular_forms from '@angular/forms';\r\n\r\n\r\nif (environment.production) {\r\n  enableProdMode()\r\n}\r\n\r\n@NgModule({})\r\nclass main {\r\n  static inject: Function\r\n\r\n  constructor(private injector: Injector) {\r\n    main.inject = (name: any) => injector.get(name)\r\n  }\r\n}\r\n\r\n(async () => {\r\n  const AngularCore = angular_core\r\n  const AngularRouter = angular_router\r\n  const PlatformBrowser = platform_browser\r\n  const PlatformBrowserDynamic = platform_browser_dynamic\r\n  const AngularForms = angular_forms\r\n  const MainModule = main\r\n  const text = await fetch('app/main.js').then(rs => rs.text())\r\n  const AppRoutingModule = await eval(eval(text.split(\"\\n\")[0]))\r\n  platformBrowserDynamic().bootstrapModule(AppRoutingModule).catch(err => console.error(err))\r\n})()\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}